@namespace MudBlazor
@using System.Globalization;
@using MudBlazor.Utilities
@inherits MudPicker<MudColor>

@Render

@code {

    protected override RenderFragment PickerContent=> 
    @<CascadingValue Value="@this" IsFixed="true">
        <MudPickerContent Class="mud-picker-color-content">
            @if(!DisableColorField)
            {
                <div class="mud-picker-color-picker" style="@($"background-color: {_baseColor.ToRGB()}")">
                    <div class="mud-picker-color-overlay mud-picker-color-overlay-white">
                        <div class="mud-picker-color-overlay mud-picker-color-overlay-black">
                            <div class="mud-picker-color-overlay" @onclick="OnMouseClick" @onmousedown="OnMouseDown" @onmouseup="OnMouseUp" @onmouseover="OnMouseOver">
                                <div class="mud-picker-color-selector" style="transform: @GetSelectorLocation()" @onclick:stopPropagation="true"></div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if(!DisableSliders || !DisableInputs)
            {
                <div class="mud-picker-color-controls">
                    @if(!DisableSliders)
                    {
                        <div class="mud-picker-color-controls-row">
                            <div class="mud-picker-color-dot">
                                <div class="mud-picker-color-fill" style="@($"background: {_color.ToRGBA()};")"></div>
                            </div>
                            <div class="mud-picker-color-sliders">
                                <MudSlider Class="mud-picker-color-slider hue" T="int" Value="(int)_color.H" ValueChanged="UpdateBaseColorSlider" Step="1" Min="0" Max="259" />
                                @if(!DisableAlpha)
                                {
                                    <MudSlider Class="mud-picker-color-slider alpha" Value="_color.A" ValueChanged="SetAlpha" T="int"  Min="0" Max="255" Step="1" Style="@($"background-image: linear-gradient(to right, transparent, {_color.ToRGB()});")" />
                                }
                            </div>
                        </div>
                    }
                    @if(!DisableInputs)
                    {
                        <div class="mud-picker-color-controls-row">
                            <div class="mud-picker-color-inputs">
                                @switch(ColorPickerMode)
                                {
                                    case ColorPickerMode.RGB:
                                        <MudNumericField Value="_color.R" T="int" ValueChanged="SetR" Class="mud-picker-color-inputfield" HelperText="R" Min="0" Max="255" Variant="Variant.Outlined" HideSpinButtons="true" />
                                        <MudNumericField Value="_color.G" T="int" ValueChanged="SetG" Class="mud-picker-color-inputfield" HelperText="G" Min="0" Max="255" Variant="Variant.Outlined" HideSpinButtons="true" />
                                        <MudNumericField Value="_color.B" T="int" ValueChanged="SetB" Class="mud-picker-color-inputfield" HelperText="B" Min="0" Max="255" Variant="Variant.Outlined" HideSpinButtons="true" />
                                    break;
                                    case ColorPickerMode.HSL:
                                        <MudNumericField Value="@_color.H" T="double" ValueChanged="SetH" Class="mud-picker-color-inputfield" HelperText="H" Step="1" Min="0" Max="360" Variant="Variant.Outlined" HideSpinButtons="true" />
                                        <MudNumericField Value="@_color.S" T="double" ValueChanged="SetS" Class="mud-picker-color-inputfield" HelperText="S" Step="0.01" Min="0" Max="100" Variant="Variant.Outlined" HideSpinButtons="true" />
                                        <MudNumericField Value="@_color.L" T="double"  ValueChanged="SetL" Class="mud-picker-color-inputfield" HelperText="L"Step="0.01"  Min="0" Max="100" Variant="Variant.Outlined" HideSpinButtons="true" />
                                    break;
                                    case ColorPickerMode.HEX:
                                        <MudTextField Value="_color.Value" ValueChanged="SetInputString" T="string" Class="mud-picker-color-inputfield" Variant="Variant.Outlined" HelperText="HEX" />
                                    break;
                                    default:
                                    break;
                                }
                        
                                @if(!DisableAlpha && ColorPickerMode != ColorPickerMode.HEX)
                                {
                                    <MudNumericField Value="@(Math.Round(  _color.A / 255.0,2))" T="double" ValueChanged="SetAlpha" Class="mud-picker-color-inputfield" HelperText="A" Min="0" Max="1" Variant="Variant.Outlined" HideSpinButtons="true" />
                                }
                            </div>
                            @if(!DisableModeSwitch)
                            {
                                <div class="mud-picker-control-switch">
                                    <MudIconButton OnClick="ChangeMode" Icon="@Icons.Material.Filled.ImportExport" Class="pa-1 me-n1"></MudIconButton>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </MudPickerContent>
    </CascadingValue>;
    
}
